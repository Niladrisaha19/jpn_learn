{"version":3,"sources":["components/WordBankContext.js","components/SearchAppBar.js","components/InteractiveList.js","components/KanjiDefinitionScreen.js","components/DefinitionScreen.js","components/WordBank.js","components/Practice.js","components/themes.js","APIs/DuoAPI.js","components/Settings.js","components/FlashCards.js","components/JapaneseScreen.js","App.js","index.js"],"names":["WordBankContext","createContext","useStyles","makeStyles","theme","root","flexGrow","menuButton","marginRight","spacing","title","display","breakpoints","up","search","position","borderRadius","shape","backgroundColor","fade","palette","common","white","marginLeft","width","searchIcon","padding","height","pointerEvents","alignItems","justifyContent","inputRoot","color","inputInput","paddingLeft","transition","transitions","create","SearchAppBar","props","React","useState","left","state","setState","currScreen","setCurrScreen","classes","jisho","require","history","useHistory","context","useContext","useEffect","push","anchor","toggleDrawer","open","event","type","key","className","AppBar","dark","Toolbar","IconButton","aria-label","onClick","edge","Typography","variant","noWrap","InputBase","placeholder","input","inputProps","onKeyDown","keyCode","loading","searchForPhrase","target","value","toLowerCase","then","data","meta","status","SearchData","JSON","stringify","SwipeableDrawer","onClose","onOpen","clsx","list","fullList","role","List","ListItem","button","style","marginTop","ListItemIcon","ListItemText","primary","Divider","maxWidth","background","paper","noResults","textAlign","top","transform","wordBank","userSelect","Alert","elevation","CheckboxListSecondary","setOpen","error","setError","json","parse","itemToSearch","handleClose","reason","length","loadingAnimation","dense","Snackbar","autoHideDuration","anchorOrigin","vertical","horizontal","severity","map","slug","match","japanese","hasOwnProperty","reading","word","replace","name","id","secondary","primaryTypographyProps","ListItemSecondaryAction","checkWord","Chip","label","colorPrimary","onDelete","deleteIcon","wordData","senses","english_definitions","jlpt","split","toUpperCase","filter","e","kanji","addValue","addToWordBank","CircularProgress","fontSize","paddingTop","strokes","translation","margin","hiragana","gif","card","KanjiDefinitionScreen","item","setItem","examples","setExamples","showEx","setShowEx","showStrokes","setShowStrokes","setWordBank","performSearch","getWords","a","searchForKanji","params","searchForExamples","data2","newItem","newExamples","results","el","makeExampleCard","example","Grid","component","Card","xs","CardContent","pos","meaning","float","kunyomi","jlptLevel","Button","document","getElementById","Fab","goBack","src","strokeOrderGifUri","strokeCount","container","kunyomiExamples","index","Accordion","AccordionSummary","expandIcon","aria-controls","english","AccordionDetails","kana","kanjiBig","kanjiSmall","DefinitionScreen","setJlpt","makeCard","parts_of_speech","join","descendingComparator","b","orderBy","getComparator","order","stableSort","array","comparator","stabilizedThis","sort","headCells","numeric","disablePadding","EnhancedTableHead","onSelectAllClick","numSelected","rowCount","onRequestSort","TableHead","TableRow","TableCell","Checkbox","indeterminate","checked","onChange","headCell","align","sortDirection","TableSortLabel","active","direction","property","visuallyHidden","useToolbarStyles","paddingRight","highlight","lighten","light","text","flex","marginBottom","table","minWidth","border","clip","overflow","selected","main","WordBank","setOrder","setOrderBy","setSelected","page","setPage","rowsPerPage","setRowsPerPage","displayed","setDisplayed","setSearch","anchorEl","setAnchorEl","window","innerWidth","setWidth","filterChip","setFilterChip","addEventListener","copyWords","forEach","emptyRows","Math","min","searchEvent","console","log","query","searchWord","newList","includes","hira","clearSearch","level","clear","listToSearch","closeFilter","clearFilter","openFilter","currentTarget","EnhancedTableToolbar","classesToolBar","Tooltip","removeValue","indexOf","splice","TextField","aria-haspopup","keepMounted","Boolean","PaperProps","paddingBottom","MenuItem","Paper","TableContainer","Table","aria-labelledby","size","newSelecteds","n","TableBody","slice","row","isItemSelected","labelId","hover","aria-checked","tabIndex","selectedIndex","newSelected","concat","handleClick","scope","openDefinition","cursor","colSpan","TablePagination","rowsPerPageOptions","count","onChangePage","newPage","onChangeRowsPerPage","parseInt","highScore","score","right","noWords","Practice","currWord","setCurrWord","correctResp","setCorrectResp","response","setResponse","setHightScore","setScore","wordList","setWordList","finished","setFinished","copyList","i","highscore","getRandomWord","floor","random","gutterBottom","s","CardActions","lightTheme","createMuiTheme","darkTheme","default","DuoAPI","credentials","this","username","password","baseUrl","jwt","axios","url","method","headers","login","result","words","language_data","skills","topic","learned","vocab_overview","word_string","Settings","setUsername","setPassword","setLoading","progress","setProgress","totalWords","setTotalWords","totalImp","setTotalImp","openBtn","setOpenBtn","anchorRef","useRef","setSelectedIndex","errorMessage","setErrorMessage","successMessage","setSuccessMessage","fs","getDuoWords","duo","getLearnedWords","addDuoWords","imported","found","newWord","items","options","handleFile","files","path","arrayPath","writeFileSync","readFile","err","parsedJson","upload","handleCloseBtn","current","contains","FormControl","FormLabel","FormGroup","FormControlLabel","control","Switch","setTheme","form","noValidate","required","fullWidth","autoComplete","autoFocus","LinearProgress","hidden","accept","webkitdirectory","htmlFor","ButtonGroup","ref","undefined","aria-expanded","prevOpen","Popper","disablePortal","modifiers","offset","enabled","TransitionProps","placement","Grow","transformOrigin","ClickAwayListener","onClickAway","MenuList","option","disabled","handleMenuItemClick","FlashCards","reload","setReload","flip","setFlip","manageKeyPress","removeEventListener","wrong","wrongWord","checkWrong","addWrong","rightWord","removeWrong","prevState","buttons","bottom","flipOnHover","flipOnClick","isFlipped","flipDirection","JapaneseScreen","exact","render","Component","App","searchValue","setSearchValue","currTheme","setCurrTheme","setWords","Provider","unshift","bool","newWords","ThemeProvider","CssBaseline","ReactDOM"],"mappings":"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","file":"static/js/main.b0f371ea.chunk.js","sourcesContent":["import { createContext } from \"react\";\n\nconst WordBankContext = createContext({});\n\nexport default WordBankContext;","import React, { useContext, useEffect } from 'react';\nimport clsx from 'clsx';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport IconButton from '@material-ui/core/IconButton';\nimport Typography from '@material-ui/core/Typography';\nimport InputBase from '@material-ui/core/InputBase';\nimport { fade, makeStyles } from '@material-ui/core/styles';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport SearchIcon from '@material-ui/icons/Search';\nimport Divider from '@material-ui/core/Divider';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport List from '@material-ui/core/List';\nimport SwipeableDrawer from '@material-ui/core/SwipeableDrawer';\nimport SettingsIcon from '@material-ui/icons/Settings';\nimport LanguageIcon from '@material-ui/icons/Language';\nimport StorageIcon from '@material-ui/icons/Storage';\nimport { useHistory } from 'react-router-dom';\nimport ImportContactsRoundedIcon from '@material-ui/icons/ImportContacts';\nimport WordBankContext from './WordBankContext';\nimport CollectionsIcon from '@material-ui/icons/Collections';\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        flexGrow: 1,\n    },\n    menuButton: {\n        marginRight: theme.spacing(2),\n    },\n    title: {\n        flexGrow: 1,\n        display: 'none',\n        [theme.breakpoints.up('sm')]: {\n            display: 'block',\n        },\n        userSelect: 'none'\n    },\n    search: {\n        position: 'relative',\n        borderRadius: theme.shape.borderRadius,\n        backgroundColor: fade(theme.palette.common.white, 0.15),\n        '&:hover': {\n            backgroundColor: fade(theme.palette.common.white, 0.25),\n        },\n        marginLeft: 0,\n        width: '100%',\n        [theme.breakpoints.up('sm')]: {\n            marginLeft: theme.spacing(1),\n            width: 'auto',\n        },\n    },\n    searchIcon: {\n        padding: theme.spacing(0, 2),\n        height: '100%',\n        position: 'absolute',\n        pointerEvents: 'none',\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n    },\n    inputRoot: {\n        color: 'inherit',\n    },\n    inputInput: {\n        padding: theme.spacing(1, 1, 1, 0),\n        // vertical padding + font size from searchIcon\n        paddingLeft: `calc(1em + ${theme.spacing(4)}px)`,\n        transition: theme.transitions.create('width'),\n        width: '100%',\n        [theme.breakpoints.up('sm')]: {\n            width: '17ch',\n            '&:focus': {\n                width: '22ch',\n            },\n        },\n    },\n}));\n\nexport default function SearchAppBar(props) {\n    const [state, setState] = React.useState({ left: false, });\n    const [currScreen, setCurrScreen] = React.useState(\"Arif Journal\");\n\n    const classes = useStyles();\n    const JishoApi = require('unofficial-jisho-api');\n    const jisho = new JishoApi();\n    const history = useHistory();\n    const context = useContext(WordBankContext);\n\n    useEffect(() => {\n        history.push(\"/\");\n        setCurrScreen(\"Arif Journal\")\n    }, [])\n\n    const performSearch = (event) => {\n        if (event.keyCode == 13) {\n            props.loading(true);\n            jisho.searchForPhrase(event.target.value.toLowerCase()).then((data) => {\n                if (event.target.value == \"\") {\n                    data.meta.status = 400;\n                }\n                props.SearchData(JSON.stringify(data, null, 2));\n                props.loading(false);\n                history.push(\"/\");\n            });\n        }\n    }\n    const toggleDrawer = (anchor, open) => (event) => {\n        if (event && event.type === 'keydown' && (event.key === 'Tab' || event.key === 'Shift')) {\n            return;\n        }\n\n        setState({ ...state, [anchor]: open });\n    };\n\n    const list = (anchor) => (\n        <div\n            className={clsx(classes.list, {\n                [classes.fullList]: anchor === 'top' || anchor === 'bottom',\n            })}\n            role=\"presentation\"\n            onClick={toggleDrawer(anchor, false)}\n            onKeyDown={toggleDrawer(anchor, false)}\n        >\n            <List>\n                <ListItem button key={\"Arif Journal\"} style={{ marginTop: '2pt' }} onClick={() => { history.push(\"/\"); setCurrScreen(\"Arif Journal\") }}>\n                    <ListItemIcon>\n                        <LanguageIcon />\n                    </ListItemIcon>\n                    <ListItemText primary={\"Arif Journal\"} />\n                </ListItem>\n\n                <ListItem button key={\"Word Bank\"} onClick={() => { history.push(\"/wordBank\"); setCurrScreen(\"Word Bank\") }}>\n                    <ListItemIcon>\n                        <StorageIcon />\n                    </ListItemIcon>\n                    <ListItemText primary={\"Word Bank\"} />\n                </ListItem>\n\n                <ListItem button key={\"Flash Cards\"} onClick={() => { history.push(\"/flashcards\"); setCurrScreen(\"Flash Cards\") }}>\n                    <ListItemIcon>\n                        <CollectionsIcon />\n                    </ListItemIcon>\n                    <ListItemText primary={\"Flash Cards\"} />\n                </ListItem>\n\n                <ListItem button key={\"Practice\"} onClick={() => { history.push(\"/practice\"); setCurrScreen(\"Practice\") }}>\n                    <ListItemIcon>\n                        <ImportContactsRoundedIcon />\n                    </ListItemIcon>\n                    <ListItemText primary={\"Practice\"} />\n                </ListItem>\n\n            </List>\n            <Divider />\n            <List>\n                <ListItem button key={\"Settings\"} onClick={() => { history.push(\"/settings\"); setCurrScreen(\"Settings\") }}>\n                    <ListItemIcon>\n                        <SettingsIcon />\n                    </ListItemIcon>\n                    <ListItemText primary={\"Settings\"} />\n                </ListItem>\n            </List>\n        </div>\n    );\n\n    return (\n        <div className={classes.root}>\n            <AppBar position=\"fixed\" color={context.state.dark ? \"default\" : \"primary\"}>\n                <Toolbar>\n                    <IconButton\n                        color=\"inherit\"\n                        aria-label=\"open drawer\"\n                        onClick={toggleDrawer('left', true)}\n                        edge=\"start\"\n                    >\n                        <MenuIcon />\n                    </IconButton>\n                    <Typography className={classes.title} variant=\"h6\" noWrap>\n                        {currScreen}\n                    </Typography>\n                    <div className={classes.search}>\n                        <div className={classes.searchIcon}>\n                            <SearchIcon />\n                        </div>\n                        <InputBase\n                            placeholder=\"Search in dictionary\"\n                            classes={{\n                                root: classes.inputRoot,\n                                input: classes.inputInput,\n                            }}\n                            inputProps={{ 'aria-label': 'search' }}\n                            onKeyDown={performSearch}\n                        />\n                    </div>\n                </Toolbar>\n            </AppBar>\n            <SwipeableDrawer\n                anchor={'left'}\n                open={state['left']}\n                onClose={toggleDrawer('left', false)}\n                onOpen={toggleDrawer('left', true)}\n            >\n                {list('left')}\n            </SwipeableDrawer>\n        </div>\n    );\n}\n","import React, { useContext } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemSecondaryAction from '@material-ui/core/ListItemSecondaryAction';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport AddIcon from '@material-ui/icons/Add';\nimport IconButton from '@material-ui/core/IconButton';\nimport { useHistory } from 'react-router-dom';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport MuiAlert from '@material-ui/lab/Alert';\nimport WordBankContext from './WordBankContext';\nimport DoneIcon from '@material-ui/icons/Done';\nimport Chip from '@material-ui/core/Chip';\nimport CircularProgress from '@material-ui/core/CircularProgress';\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        width: '100%',\n        maxWidth: '100%',\n        height: '100%',\n        backgroundColor: theme.palette.background.paper,\n    },\n    noResults: {\n        textAlign: 'center',\n        position: 'absolute',\n        left: '50%',\n        top: '50%',\n        transform: 'translate(-50%, -50%)',\n    },\n    wordBank: {\n        backgroundColor: \"#4caf50 !important\",\n        marginRight: '0pt',\n        userSelect: 'none'\n    },\n    loading: {\n        position: 'absolute',\n        left: '50%',\n        top: '50%',\n        transform: 'translate(-50%, -50%)',\n    }\n}));\n\nfunction Alert(props) {\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\n}\n\nexport default function CheckboxListSecondary(props) {\n    const classes = useStyles();\n    const history = useHistory();\n    const [open, setOpen] = React.useState(false);\n    const [error, setError] = React.useState(false);\n\n    const context = useContext(WordBankContext);\n\n    let json = JSON.parse(props.itemToSearch);\n\n    const addToWordBank = (wordData, title) => {\n        let word = {\n            \"kanji\": title,\n            \"hira\": wordData.japanese[0].reading,\n            \"english\": wordData.senses[0].english_definitions[0],\n            \"jlpt\": wordData.jlpt[0].split(\"jlpt-\")[1].toUpperCase()\n        }\n\n        if (context.state.japanese.filter(e => e.kanji === word.kanji).length > 0) {\n            setError(true);\n        }\n        else {\n            context.addValue(word);\n            setOpen(true);\n        }\n    }\n\n    const handleClose = (event, reason) => {\n        if (reason === 'clickaway') {\n            return;\n        }\n\n        setOpen(false);\n        setError(false);\n    };\n\n    const makeUrl = (name) => {\n        if (name.length == 1) {\n            return \"/kanjiDefinition/\" + name\n        }\n        else {\n            return \"/definition/\" + name\n        }\n    }\n\n    if (json != null && json[\"data\"].length > 0 && !props.loadingAnimation) {\n        json = json[\"data\"];\n        return (\n            <div>\n                <List dense className={classes.root}>\n                    <Snackbar open={open} autoHideDuration={4000} onClose={handleClose} anchorOrigin={{ vertical: 'top', horizontal: 'center' }}>\n                        <Alert onClose={handleClose} severity=\"success\">\n                            Added word to Word Bank\n                        </Alert>\n                    </Snackbar>\n                    <Snackbar open={error} autoHideDuration={4000} onClose={handleClose} anchorOrigin={{ vertical: 'top', horizontal: 'center' }}>\n                        <Alert onClose={handleClose} severity=\"error\">\n                            Word already in Word Bank\n                        </Alert>\n                    </Snackbar>\n                    {json.map((value) => {\n                        var title = value.slug;\n                        if (title.match(\"[a-zA-Z0-9]\")) {\n                            const japanese = value.japanese[0];\n                            title = japanese.hasOwnProperty(\"reading\") ? japanese.reading : japanese.word;\n                        }\n                        else {\n                            title = title.replace(\"-1\", \"\");\n                        }\n\n                        if (typeof value.slug !== \"undefined\") {\n                            return (\n                                <ListItem button onClick={() => { history.push(makeUrl(title)); }} key={value.slug}>\n                                    <ListItemText id={value}\n                                        primary={`${title}`}\n                                        secondary={value.slug == title ? (`${value.japanese[0].reading}`) : null}\n                                        primaryTypographyProps={{ variant: \"h6\" }}\n                                        style={value.slug != title ? {padding: \"8pt\"} : null}\n                                    />\n                                    <ListItemSecondaryAction>\n                                        {context.checkWord(title) ? (\n                                            <Chip\n                                                label=\"In Word Bank\"\n                                                color=\"primary\"\n                                                classes={{ colorPrimary: classes.wordBank }}\n                                                onDelete={() => { }}\n                                                deleteIcon={<DoneIcon />}\n                                            />\n                                        ) : (\n                                                <IconButton edge=\"end\" aria-label=\"Add\" onClick={() => { addToWordBank(value, title) }}>\n                                                    <AddIcon />\n                                                </IconButton>\n                                            )}\n                                    </ListItemSecondaryAction>\n                                </ListItem>\n                            );\n                        }\n                    })}\n                </List>\n            </div>\n        );\n    }\n    else if (json != null && json.meta.status == 200 && !props.loadingAnimation) {\n        return (\n            <div className={classes.noResults}>\n                <h1>No Results Found</h1>\n                <p style={{ fontSize: '14pt' }}>You can search in english, hiragana, katakana, kanji and in romanji</p>\n            </div>\n        )\n    }\n    else if (props.loadingAnimation) {\n        return (\n            <div className={classes.loading}>\n                <CircularProgress />\n            </div>\n        )\n    }\n    else {\n        return (\n            <div>\n                <h1 className={classes.noResults} style={{ width: '100%' }}>Search something in the search bar :)</h1>\n            </div>\n        )\n    }\n}\n","import React, { useState, useEffect, useContext } from 'react'\nimport { makeStyles } from '@material-ui/core/styles';\nimport Fab from '@material-ui/core/Fab';\nimport ArrowBackIcon from '@material-ui/icons/ArrowBack';\nimport Accordion from '@material-ui/core/Accordion';\nimport AccordionSummary from '@material-ui/core/AccordionSummary';\nimport AccordionDetails from '@material-ui/core/AccordionDetails';\nimport Typography from '@material-ui/core/Typography';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport Button from '@material-ui/core/Button';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport DoneIcon from '@material-ui/icons/Done';\nimport Chip from '@material-ui/core/Chip';\nimport { useHistory } from 'react-router-dom';\nimport Grid from '@material-ui/core/Grid';\nimport WordBankContext from './WordBankContext';\nimport AddIcon from '@material-ui/icons/Add';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport MuiAlert from '@material-ui/lab/Alert';\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n      '& > * + *': {\n        marginTop: theme.spacing(2),\n      },\n      padding: \"16pt\",\n      paddingTop: \"10pt\",\n      userSelect: 'none'\n    },\n    kanji: {\n        fontSize: '64pt'\n    },\n    strokes: {\n        textAlign: 'center'\n    },\n    translation: {\n        margin: '0pt',\n        fontSize: '24pt'\n    },\n    hiragana: {\n        margin: '0pt',\n        fontSize: '16pt'\n    },\n    gif: {\n        width: '78pt',\n    },\n    wordBank: {\n        backgroundColor: \"#4caf50 !important\",\n        marginRight: '10pt', \n        userSelect: 'none'\n    },\n    addToWordBank: {\n        backgroundColor: \"#ff9800 !important\",\n        marginRight: '10pt', \n        userSelect: 'none'\n    },\n    card: {\n        justifyContent: \"space-between\",\n        textAlign: 'center'\n    }\n}));\n\nfunction Alert(props) {\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\n}\n\nexport default function KanjiDefinitionScreen(props) {\n    const classes = useStyles();\n    const [item, setItem] = useState({});\n    const [examples, setExamples] = useState([]);\n    const [showEx, setShowEx] = useState(false);\n    const [showStrokes, setShowStrokes] = useState(false);\n    const [wordBank, setWordBank] = useState(false);\n    const [open, setOpen] = React.useState(false);\n    const history = useHistory();\n\n    const context = useContext(WordBankContext);\n\n    const JishoApi = require('unofficial-jisho-api');\n    const jisho = new JishoApi();\n\n    useEffect(() => {\n        performSearch();\n        getWords();\n    }, [])\n    \n    const performSearch = async () => {\n        let data = await jisho.searchForKanji(props.match.params.name);\n        let data2 = await jisho.searchForExamples(props.match.params.name);\n\n        const newItem = JSON.parse(JSON.stringify(data, null, 2));\n        const newExamples = JSON.parse(JSON.stringify(data2, null, 2));\n        \n        setItem(newItem);\n        setExamples(newExamples.results);\n    }\n\n    const toggleExamples = () => {\n        setShowEx(!showEx);\n    }\n\n    const toggleStrokes = () => {\n        setShowStrokes(!showStrokes);\n        let kanji = document.getElementById(\"kanji\");\n        kanji.style.display = kanji.style.display == \"none\" ? \"block\" : \"none\";\n    }\n\n    const getWords = async () => {\n        if (context.state.japanese.filter(el => props.match.params.name == el.kanji).length > 0) {\n            setWordBank(true);\n        }\n    }\n\n    const makeExampleCard = (example) => {\n        return (\n            <Grid item component={Card} xs className={classes.card} key={example.example}>\n                <CardContent>\n                    <Typography variant=\"h5\" component=\"h2\">\n                        {example.example}\n                    </Typography>\n                    <Typography className={classes.pos} color=\"textSecondary\">\n                        {example.reading}\n                    </Typography>\n                    <Typography variant=\"body2\" component=\"p\">\n                        {example.meaning}\n                    </Typography>\n                </CardContent>\n            </Grid>\n        )\n    }\n\n    const addToWordBank = () => {\n        let word = {\n            \"kanji\": props.match.params.name,\n            \"hira\": item.kunyomi[0],\n            \"english\": item.meaning,\n            \"jlpt\": item.jlptLevel\n        }\n\n        context.addValue(word);\n        setOpen(true);\n        setWordBank(true);\n    }\n\n    const handleClose = (event, reason) => {\n        if (reason === 'clickaway') {\n            return;\n        }\n\n        setOpen(false);\n    };\n\n    return (\n        <div className={classes.root}>\n            <Snackbar open={open} autoHideDuration={4000} onClose={handleClose} anchorOrigin={{vertical: 'top', horizontal: 'center'}}>\n                <Alert onClose={handleClose} severity=\"success\">\n                    Added word to Word Bank\n                </Alert>\n            </Snackbar>\n            <div style={{float: 'right'}}>\n                {wordBank ? (\n                    <Chip\n                        label=\"In Word Bank\"\n                        color=\"primary\"\n                        classes={{colorPrimary: classes.wordBank}}\n                        onDelete={() => {}}\n                        deleteIcon={<DoneIcon />}\n                    />\n                ) : (\n                    <Chip\n                        label=\"Add to Word Bank\"\n                        color=\"primary\"\n                        classes={{colorPrimary: classes.addToWordBank}}\n                        onDelete={() => {addToWordBank()}}\n                        deleteIcon={<AddIcon />}\n                    />\n                )}\n                <Button variant=\"contained\" color=\"primary\" style={{marginRight: '10pt'}} onClick={toggleExamples}>\n                    {showEx ? \"Hide Examples\" : \"Show Examples\"}\n                </Button>\n                <Button variant=\"contained\" color=\"secondary\" style={{marginRight: '10pt'}} onClick={toggleStrokes}>\n                    {showStrokes ? \"Hide Stroke Order\" : \"Show Stroke Order\"}\n                </Button>\n                <Fab color=\"primary\" aria-label=\"add\">\n                    <ArrowBackIcon onClick={() => {history.goBack()}}/>\n                </Fab>\n            </div>\n            <table style={{marginTop: '-10pt'}}>\n                <tbody>\n                    <tr>\n                        <td id=\"kanji\" className={classes.kanji}>{props.match.params.name}</td>\n                        { showStrokes ? (<td><img id=\"gif\" src={item.strokeOrderGifUri} className={classes.gif} /></td>) : (<td style={{display: 'none'}}><span/></td>) }\n                        <td style={{paddingLeft: '22pt'}}>\n                            <p className={classes.translation}>{item.meaning}</p>\n                            { item.kunyomi != null ? (<p className={classes.hiragana}>{item.kunyomi[0]}</p>) : (<p/>) }\n                        </td>\n                    </tr>\n                    <tr>\n                        <td className={classes.strokes}>{item.strokeCount} strokes</td>\n                        <td style={{paddingLeft: '22pt'}}>JLPT {item.jlptLevel}</td>\n                    </tr>\n                </tbody>\n            </table>\n            <Grid container alignItems=\"stretch\">\n                { JSON.stringify(item) != \"{}\" ? (\n                    item.kunyomiExamples.map((value, index) => {\n                        if (index < 4) {\n                            return (makeExampleCard(value))\n                        }\n                    }) \n                ) : (<span />)}\n            </Grid>\n            <Grid container alignItems=\"stretch\">\n                { JSON.stringify(item) != \"{}\" ? (\n                    item.kunyomiExamples.map((value, index) => {\n                        if (index >= 4 && index < 8) {\n                            return (makeExampleCard(value))\n                        }\n                    }) \n                ) : (<span />)}\n            </Grid>\n            { examples.length > 0 && showEx? (<h1>Examples</h1>) : (<span />) }\n            { examples.length > 0 && showEx? (\n                examples.map((value) => {\n                    return (\n                        <Accordion key={value.english}>\n                            <AccordionSummary\n                                expandIcon={<ExpandMoreIcon />}\n                                aria-controls=\"panel1a-content\"\n                                id=\"panel1a-header\"\n                            >\n                                <Typography>{value.english}</Typography>\n                            </AccordionSummary>\n                            <AccordionDetails style={{display: 'grid'}}>\n                                <Typography><b>Kanji:</b> {value.kanji}</Typography>\n                                <Typography><b>Kana:</b> {value.kana}</Typography>\n                            </AccordionDetails>\n                        </Accordion>\n                    )\n                })) : (<span />)}\n        </div>\n    )\n}\n\n","import React, { useState, useEffect, useContext } from 'react'\nimport { makeStyles } from '@material-ui/core/styles';\nimport Fab from '@material-ui/core/Fab';\nimport ArrowBackIcon from '@material-ui/icons/ArrowBack';\nimport Accordion from '@material-ui/core/Accordion';\nimport AccordionSummary from '@material-ui/core/AccordionSummary';\nimport AccordionDetails from '@material-ui/core/AccordionDetails';\nimport Typography from '@material-ui/core/Typography';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport Button from '@material-ui/core/Button';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport DoneIcon from '@material-ui/icons/Done';\nimport Chip from '@material-ui/core/Chip';\nimport { useHistory } from 'react-router-dom';\nimport Grid from '@material-ui/core/Grid';\nimport WordBankContext from './WordBankContext';\nimport AddIcon from '@material-ui/icons/Add';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport MuiAlert from '@material-ui/lab/Alert';\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n      '& > * + *': {\n        marginTop: theme.spacing(2),\n      },\n      padding: \"16pt\",\n      paddingTop: \"10pt\",\n      userSelect: 'none'\n    },\n    kanjiBig: {\n        fontSize: '64pt'\n    },\n    kanjiSmall: {\n        fontSize: '36pt'\n    },\n    strokes: {\n        textAlign: 'center'\n    },\n    translation: {\n        margin: '0pt',\n        fontSize: '24pt'\n    },\n    hiragana: {\n        margin: '0pt',\n        fontSize: '16pt'\n    },\n    gif: {\n        width: '88pt',\n        paddingLeft: '16pt'\n    },\n    wordBank: {\n        backgroundColor: \"#4caf50 !important\",\n        marginRight: '10pt', \n        userSelect: 'none'\n    },\n    addToWordBank: {\n        backgroundColor: \"#ff9800 !important\",\n        marginRight: '10pt', \n        userSelect: 'none'\n    },\n    card: {\n        justifyContent: \"space-between\",\n        textAlign: 'center'\n    }\n}));\n\nfunction Alert(props) {\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\n}\n\nexport default function DefinitionScreen(props) {\n    const classes = useStyles();\n    const [item, setItem] = useState({});\n    const [examples, setExamples] = useState([]);\n    const [showEx, setShowEx] = useState(false);\n    const [jlpt, setJlpt] = useState(\"\");\n    const [wordBank, setWordBank] = useState(false);\n    const history = useHistory();\n    const [open, setOpen] = React.useState(false);\n\n    const context = useContext(WordBankContext);\n\n    const JishoApi = require('unofficial-jisho-api');\n    const jisho = new JishoApi();\n\n    useEffect(() => {\n        performSearch();\n        getWords();\n    }, [])\n    \n    const performSearch = async () => {\n        let data = await jisho.searchForPhrase(props.match.params.name);\n        let data2 = await jisho.searchForExamples(props.match.params.name);\n\n        const newItem = JSON.parse(JSON.stringify(data, null, 2)).data[0];\n        const newExamples = JSON.parse(JSON.stringify(data2, null, 2));\n\n        setItem(newItem);\n        setExamples(newExamples.results);\n        if (newItem.jlpt.length > 0) {\n            setJlpt(newItem.jlpt[0].toUpperCase());\n        }\n    }\n\n    const toggleExamples = () => {\n        setShowEx(!showEx);\n    }\n\n    const getWords = async () => {\n        if (context.state.japanese.filter(el => props.match.params.name == el.kanji).length > 0) {\n            setWordBank(true);\n        }\n    }\n\n    const addToWordBank = () => {\n        let word = {\n            \"kanji\": props.match.params.name,\n            \"hira\": item.japanese[0].reading,\n            \"english\": item.senses[0].english_definitions[0],\n            \"jlpt\": item.jlpt[0].split(\"jlpt-\")[1].toUpperCase()\n        }\n\n        context.addValue(word);\n        setOpen(true);\n        setWordBank(true);\n    }\n\n    const handleClose = (event, reason) => {\n        if (reason === 'clickaway') {\n            return;\n        }\n\n        setOpen(false);\n    };\n\n    const makeCard = (value) => {\n        return (\n            <Grid item component={Card} xs className={classes.card} key={value.english_definitions}>\n                <CardContent>\n                    <Typography className={classes.pos} color=\"textSecondary\">\n                        {value.parts_of_speech}\n                    </Typography>\n                    <Typography variant=\"h5\" component=\"h2\">\n                        {value.english_definitions.join(\", \")}\n                    </Typography>\n                    <Typography variant=\"body2\" component=\"p\">\n                        {value.meaning}\n                    </Typography>\n                </CardContent>\n            </Grid>\n        )\n    }\n\n    return (\n        <div className={classes.root}>\n            <Snackbar open={open} autoHideDuration={4000} onClose={handleClose} anchorOrigin={{vertical: 'top', horizontal: 'center'}}>\n                <Alert onClose={handleClose} severity=\"success\">\n                    Added word to Word Bank\n                </Alert>\n            </Snackbar>\n            <div style={{float: 'right'}}>\n                {wordBank ? (\n                    <Chip\n                        label=\"In Word Bank\"\n                        color=\"primary\"\n                        classes={{colorPrimary: classes.wordBank}}\n                        onDelete={() => {}}\n                        deleteIcon={<DoneIcon />}\n                    />\n                ) : (\n                    <Chip\n                        label=\"Add to Word Bank\"\n                        color=\"primary\"\n                        classes={{colorPrimary: classes.addToWordBank}}\n                        onDelete={() => {addToWordBank()}}\n                        deleteIcon={<AddIcon />}\n                    />\n                )}\n                <Button variant=\"contained\" color=\"primary\" style={{marginRight: '10pt'}} onClick={toggleExamples}>\n                    {showEx ? \"Hide Examples\" : \"Show Examples\"}\n                </Button>\n                <Fab color=\"primary\" aria-label=\"add\">\n                    <ArrowBackIcon onClick={() => {history.goBack()}}/>\n                </Fab>\n            </div>\n            { JSON.stringify(item) != \"{}\" ? (\n                <table style={{marginTop: '-10pt'}}>\n                    <tbody>\n                        <tr>\n                            <td \n                            id=\"kanji\" \n                            className={item.slug.match(\"[a-zA-Z0-9]\") ? classes.kanjiSmall : classes.kanjiBig}>\n                                {props.match.params.name}\n                            </td>\n                            <td style={{paddingLeft: '22pt'}}>\n                                <p className={classes.translation}>{item.senses[0].english_definitions[0]}</p>\n                                <p className={classes.hiragana}>{item.japanese[0].reading}</p>\n                            </td>\n                        </tr>\n                        <tr>\n                            <td style={{paddingLeft: '22pt'}}>{jlpt}</td>\n                        </tr>\n                    </tbody>\n                </table>\n            ) : (<span/>) }\n            <Grid container alignItems=\"stretch\">\n                { JSON.stringify(item) != \"{}\" ? (\n                    item.senses.map((value, index) => {\n                        if (index < 4) {\n                            return (makeCard(value))\n                        }\n                    })\n                ) : (<span />)}\n            </Grid>\n            <Grid container alignItems=\"stretch\">\n                { JSON.stringify(item) != \"{}\" ? (\n                    item.senses.map((value, index) => {\n                        if (index >= 4 && index < 8) {\n                            return (makeCard(value))\n                        }\n                    })\n                ) : (<span />)}\n            </Grid>\n            { examples.length > 0 && showEx? (<h1>Examples</h1>) : (<span />) }\n            { examples.length > 0 && showEx? (\n                examples.map((value) => {\n                    return (\n                        <Accordion key={value.english}>\n                            <AccordionSummary\n                                expandIcon={<ExpandMoreIcon />}\n                                aria-controls=\"panel1a-content\"\n                                id=\"panel1a-header\"\n                            >\n                                <Typography>{value.english}</Typography>\n                            </AccordionSummary>\n                            <AccordionDetails style={{display: 'grid'}}>\n                                <Typography><b>Kanji:</b> {value.kanji}</Typography>\n                                <Typography><b>Kana:</b> {value.kana}</Typography>\n                            </AccordionDetails>\n                        </Accordion>\n                    )\n                })) : (<span />)}\n        </div>\n    )\n}\n\n","import React, { useContext, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { lighten, makeStyles } from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TablePagination from '@material-ui/core/TablePagination';\nimport TableRow from '@material-ui/core/TableRow';\nimport TableSortLabel from '@material-ui/core/TableSortLabel';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport Paper from '@material-ui/core/Paper';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport IconButton from '@material-ui/core/IconButton';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport MuiAlert from '@material-ui/lab/Alert';\nimport { useHistory } from 'react-router-dom';\nimport ImportContactsRoundedIcon from '@material-ui/icons/ImportContacts';\nimport WordBankContext from './WordBankContext';\nimport TextField from '@material-ui/core/TextField';\nimport Chip from '@material-ui/core/Chip';\nimport FilterListIcon from '@material-ui/icons/FilterList';\nimport Menu from '@material-ui/core/Menu';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Divider from '@material-ui/core/Divider';\n\nfunction Alert(props) {\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\n}\n\n\nfunction descendingComparator(a, b, orderBy) {\n    if (b[orderBy] < a[orderBy]) {\n        return -1;\n    }\n    if (b[orderBy] > a[orderBy]) {\n        return 1;\n    }\n    return 0;\n}\n\nfunction getComparator(order, orderBy) {\n    return order === 'desc'\n        ? (a, b) => descendingComparator(a, b, orderBy)\n        : (a, b) => -descendingComparator(a, b, orderBy);\n}\n\nfunction stableSort(array, comparator) {\n    const stabilizedThis = array.map((el, index) => [el, index]);\n    stabilizedThis.sort((a, b) => {\n        const order = comparator(a[0], b[0]);\n        if (order !== 0) return order;\n        return a[1] - b[1];\n    });\n    return stabilizedThis.map((el) => el[0]);\n}\n\nconst headCells = [\n    { id: 'kanji', numeric: false, disablePadding: true, label: 'Word' },\n    { id: 'def', numeric: false, disablePadding: false, label: 'Definition' },\n    { id: 'hira', numeric: false, disablePadding: false, label: 'Hiragana' },\n    { id: 'english', numeric: false, disablePadding: false, label: 'English' },\n    { id: 'jlpt', numeric: false, disablePadding: false, label: 'JLPT Level' },\n];\n\nfunction EnhancedTableHead(props) {\n    const { classes, onSelectAllClick, order, orderBy, numSelected, rowCount, onRequestSort } = props;\n    const createSortHandler = (property) => (event) => {\n        onRequestSort(event, property);\n    };\n\n    return (\n        <TableHead>\n            <TableRow>\n                <TableCell padding=\"checkbox\">\n                    <Checkbox\n                        indeterminate={numSelected > 0 && numSelected < rowCount}\n                        checked={rowCount > 0 && numSelected === rowCount}\n                        onChange={onSelectAllClick}\n                        inputProps={{ 'aria-label': 'select all words' }}\n                        color=\"primary\"\n                    />\n                </TableCell>\n                {headCells.map((headCell) => (\n                    <TableCell\n                        key={headCell.id}\n                        align={headCell.numeric ? 'right' : 'left'}\n                        padding={headCell.disablePadding ? 'none' : 'default'}\n                        sortDirection={orderBy === headCell.id ? order : false}\n                    >\n                        <TableSortLabel\n                            active={orderBy === headCell.id}\n                            direction={orderBy === headCell.id ? order : 'asc'}\n                            onClick={createSortHandler(headCell.id)}\n                        >\n                            {headCell.label}\n                            {orderBy === headCell.id ? (\n                                <span className={classes.visuallyHidden}>\n                                    {order === 'desc' ? 'sorted descending' : 'sorted ascending'}\n                                </span>\n                            ) : null}\n                        </TableSortLabel>\n                    </TableCell>\n                ))}\n            </TableRow>\n        </TableHead>\n    );\n}\n\nEnhancedTableHead.propTypes = {\n    classes: PropTypes.object.isRequired,\n    numSelected: PropTypes.number.isRequired,\n    onRequestSort: PropTypes.func.isRequired,\n    onSelectAllClick: PropTypes.func.isRequired,\n    order: PropTypes.oneOf(['asc', 'desc']).isRequired,\n    orderBy: PropTypes.string.isRequired,\n    rowCount: PropTypes.number.isRequired,\n};\n\nconst useToolbarStyles = makeStyles((theme) => ({\n    root: {\n        paddingLeft: theme.spacing(2),\n        paddingRight: theme.spacing(1),\n    },\n    highlight:\n        theme.palette.type === 'light'\n            ? {\n                color: 'black',\n                backgroundColor: lighten(theme.palette.primary.light, 0.7),\n            }\n            : {\n                color: theme.palette.text.primary,\n                backgroundColor: theme.palette.primary.dark,\n            },\n    title: {\n        flex: '1 1 100%',\n    },\n}));\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        width: '100%',\n        userSelect: 'none'\n    },\n    paper: {\n        width: '100%',\n        marginBottom: theme.spacing(2),\n    },\n    table: {\n        minWidth: 750,\n    },\n    visuallyHidden: {\n        border: 0,\n        clip: 'rect(0 0 0 0)',\n        height: 1,\n        margin: -1,\n        overflow: 'hidden',\n        padding: 0,\n        position: 'absolute',\n        top: 20,\n        width: 1,\n    },\n    selected:\n        theme.palette.type === 'light'\n            ? {\n                backgroundColor: lighten(theme.palette.primary.light, 0.7) + '!important'\n            } : {\n                backgroundColor: lighten(theme.palette.primary.main, 0.2) + '!important'\n            }\n}));\n\nexport default function WordBank() {\n    const [order, setOrder] = React.useState('asc');\n    const [orderBy, setOrderBy] = React.useState('calories');\n    const [selected, setSelected] = React.useState([]);\n    const [page, setPage] = React.useState(0);\n    const [rowsPerPage, setRowsPerPage] = React.useState(5);\n    const [open, setOpen] = React.useState(false);\n    const [displayed, setDisplayed] = React.useState([]);\n    const [search, setSearch] = React.useState(\"\");\n    const [anchorEl, setAnchorEl] = React.useState(null);\n    const [width, setWidth] = React.useState(window.innerWidth);\n    const [filterChip, setFilterChip] = React.useState(false);\n    const [jlpt, setJlpt] = React.useState(\"\");\n\n    const history = useHistory();\n    const context = useContext(WordBankContext);\n    const classes = useStyles();\n\n    window.addEventListener('resize', () => { setWidth(window.innerWidth); })\n\n    useEffect(() => {\n        copyWords();\n    }, [])\n\n    const copyWords = () => {\n        let list = [];\n        context.state.japanese.forEach((word) => {\n            list.push(word);\n        });\n\n        setDisplayed(list);\n    }\n\n    const handleClose = (event, reason) => {\n        if (reason === 'clickaway') {\n            return;\n        }\n\n        setOpen(false);\n    };\n\n\n    const handleRequestSort = (event, property) => {\n        const isAsc = orderBy === property && order === 'asc';\n        setOrder(isAsc ? 'desc' : 'asc');\n        setOrderBy(property);\n    };\n\n    const handleSelectAllClick = (event) => {\n        if (event.target.checked) {\n            const newSelecteds = displayed.map((n) => n.kanji);\n            setSelected(newSelecteds);\n            return;\n        }\n        setSelected([]);\n    };\n\n    const handleClick = (event, name) => {\n        const selectedIndex = selected.indexOf(name);\n        let newSelected = [];\n\n        if (selectedIndex === -1) {\n            newSelected = newSelected.concat(selected, name);\n        } else if (selectedIndex === 0) {\n            newSelected = newSelected.concat(selected.slice(1));\n        } else if (selectedIndex === selected.length - 1) {\n            newSelected = newSelected.concat(selected.slice(0, -1));\n        } else if (selectedIndex > 0) {\n            newSelected = newSelected.concat(\n                selected.slice(0, selectedIndex),\n                selected.slice(selectedIndex + 1),\n            );\n        }\n\n        setSelected(newSelected);\n    };\n\n    const handleChangePage = (event, newPage) => {\n        setPage(newPage);\n    };\n\n    const handleChangeRowsPerPage = (event) => {\n        setRowsPerPage(parseInt(event.target.value, 10));\n        setPage(0);\n    };\n\n    const isSelected = (name) => selected.indexOf(name) !== -1;\n\n    const emptyRows = rowsPerPage - Math.min(rowsPerPage, displayed.length - page * rowsPerPage);\n\n    const deleteWords = () => {\n        selected.forEach((word) => {\n            context.removeValue(word);\n            let wordsCopy = displayed;\n            let index = wordsCopy.map(e => e.kanji).indexOf(word)\n            if (index != -1) {\n                displayed.splice(index, 1);\n            }\n        });\n        setOpen(true);\n        setSelected([]);\n        setDisplayed(displayed);\n    }\n\n    const openDefinition = (name) => {\n        if (name.length > 1) {\n            history.push(\"/Definition/\" + name);\n        }\n        else {\n            history.push(\"/kanjiDefinition/\" + name);\n        }\n    }\n\n    const searchEvent = (event) => {\n        if (event.keyCode == 13) {\n            console.log(\"test\")\n            let query = event.target.value;\n            searchWord(query);\n            if (filterChip) filter(jlpt, false, query);\n        }\n    }\n\n    const searchWord = (query) => {\n        setSearch(query);\n        let newList = [];\n        context.state.japanese.forEach((word) => {\n            if (word.kanji.includes(query) || (word.hira != null && word.hira.includes(query)) || word.english.includes(query)) {\n                newList.push(word);\n            }\n        });\n\n        setDisplayed(newList);\n        return newList;\n    }\n\n    const clearSearch = () => {\n        searchWord(\"\");\n        if (filterChip) filter(jlpt, true);\n    }\n\n    const filter = (level, clear = false, input = search) => {\n        let newList = []\n        let listToSearch = context.state.japanese;\n\n        if (!clear) {\n            listToSearch = searchWord(input);\n        }\n\n        listToSearch.forEach((word) => {\n            if (word.jlpt == level) {\n                newList.push(word);\n            }\n        });\n\n        closeFilter();\n        setDisplayed(newList);\n        setJlpt(level);\n        setFilterChip(true);\n    }\n\n    const clearFilter = () => {\n        setFilterChip(false);\n        if (search != \"\") searchWord(search);\n        else searchWord(\"\");\n    }\n\n    const openFilter = (event) => {\n        setAnchorEl(event.currentTarget);\n    }\n\n    const closeFilter = () => {\n        setAnchorEl(null);\n    }\n\n    const EnhancedTableToolbar = (props) => {\n        const classesToolBar = useToolbarStyles();\n        const { numSelected } = props;\n\n        return (\n            <Toolbar\n                className={clsx(classesToolBar.root, {\n                    [classesToolBar.highlight]: numSelected > 0,\n                })}\n            >\n                {numSelected > 0 ? (\n                    <Typography className={classesToolBar.title} color=\"inherit\" variant=\"subtitle1\" component=\"div\">\n                        {numSelected} selected\n                    </Typography>\n                ) : (\n                        <Typography className={classesToolBar.title} variant=\"h6\" id=\"tableTitle\" component=\"div\">\n                            Your Word Bank\n                        </Typography>\n                    )}\n\n                {numSelected > 0 ? (\n                    <Tooltip title=\"Delete\">\n                        <IconButton aria-label=\"delete\" onClick={() => { deleteWords() }}>\n                            <DeleteIcon />\n                        </IconButton>\n                    </Tooltip>\n                ) : (\n                        <div style={{ display: \"flex\" }}>\n                            {search != \"\" ? (<Chip label={search} onDelete={clearSearch} color=\"primary\" style={{ marginRight: '12pt', marginTop: '12pt' }} />) : null}\n                            {filterChip != \"\" ? (<Chip label={jlpt} onDelete={clearFilter} color=\"secondary\" style={{ marginRight: '12pt', marginTop: '12pt' }} />) : null}\n                            <TextField id=\"standard-basic\" label=\"Search Word Bank\" onKeyDown={searchEvent} style={{ marginRight: '10pt', width: '140pt' }} />\n                            <IconButton style={{ marginTop: '8pt' }} onClick={openFilter} aria-controls=\"simple-menu\" aria-haspopup=\"true\">\n                                <FilterListIcon />\n                            </IconButton>\n                            <Menu\n                                id=\"simple-menu\"\n                                anchorEl={anchorEl}\n                                keepMounted\n                                open={Boolean(anchorEl)}\n                                onClose={closeFilter}\n                                PaperProps={{\n                                    style: {\n                                        left: '50%',\n                                        transform: `translateX(${width - 130}px) translateY(80pt)`,\n                                    }\n                                }}\n                            >\n                                <Typography style={{ paddingRight: '8pt', paddingLeft: '8pt', paddingBottom: '4pt' }}>JLPT Level</Typography>\n                                <Divider />\n                                <MenuItem onClick={() => { filter(\"N1\") }}>N1</MenuItem>\n                                <MenuItem onClick={() => { filter(\"N2\") }}>N2</MenuItem>\n                                <MenuItem onClick={() => { filter(\"N3\") }}>N3</MenuItem>\n                                <MenuItem onClick={() => { filter(\"N4\") }}>N4</MenuItem>\n                                <MenuItem onClick={() => { filter(\"N5\") }}>N5</MenuItem>\n                            </Menu>\n                        </div>)}\n            </Toolbar>\n        );\n    };\n\n    EnhancedTableToolbar.propTypes = {\n        numSelected: PropTypes.number.isRequired,\n    };\n\n    return (\n        <div className={classes.root}>\n            <Snackbar open={open} autoHideDuration={4000} onClose={handleClose} anchorOrigin={{ vertical: 'top', horizontal: 'center' }}>\n                <Alert onClose={handleClose} severity=\"success\">\n                    Deleted word from Word Bank\n                </Alert>\n            </Snackbar>\n            <Paper className={classes.paper}>\n                <EnhancedTableToolbar numSelected={selected.length} />\n                <TableContainer>\n                    <Table\n                        className={classes.table}\n                        aria-labelledby=\"tableTitle\"\n                        size='medium'\n                        aria-label=\"enhanced table\"\n                    >\n                        <EnhancedTableHead\n                            classes={classes}\n                            numSelected={selected.length}\n                            order={order}\n                            orderBy={orderBy}\n                            onSelectAllClick={handleSelectAllClick}\n                            onRequestSort={handleRequestSort}\n                            rowCount={displayed.length}\n                        />\n                        <TableBody>\n                            {stableSort(displayed, getComparator(order, orderBy))\n                                .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\n                                .map((row, index) => {\n                                    const isItemSelected = isSelected(row.kanji);\n                                    const labelId = `enhanced-table-checkbox-${index}`;\n\n                                    return (\n                                        <TableRow\n                                            hover\n                                            role=\"checkbox\"\n                                            aria-checked={isItemSelected}\n                                            tabIndex={-1}\n                                            key={row.kanji}\n                                            selected={isItemSelected}\n                                            classes={{ selected: classes.selected }}\n                                        >\n                                            <TableCell padding=\"checkbox\">\n                                                <Checkbox\n                                                    onClick={(event) => handleClick(event, row.kanji)}\n                                                    checked={isItemSelected}\n                                                    inputProps={{ 'aria-labelledby': labelId }}\n                                                    color=\"primary\"\n                                                />\n                                            </TableCell>\n                                            <TableCell component=\"th\" id={labelId} scope=\"row\" padding=\"none\" style={{ fontSize: '14pt' }}>\n                                                {row.kanji}\n                                            </TableCell>\n                                            <TableCell align=\"left\">\n                                                <IconButton onClick={() => openDefinition(row.kanji)} >\n                                                    <ImportContactsRoundedIcon\n                                                        style={{ cursor: 'pointer' }}\n                                                    />\n                                                </IconButton>\n                                            </TableCell>\n                                            <TableCell align=\"left\" style={{ fontSize: '14pt' }}>{row.hira}</TableCell>\n                                            <TableCell align=\"left\" style={{ fontSize: '12pt' }}>{row.english}</TableCell>\n                                            <TableCell align=\"left\" style={{ fontSize: '12pt' }}>{row.jlpt}</TableCell>\n                                        </TableRow>\n                                    );\n                                })}\n                            {emptyRows > 0 && (\n                                <TableRow style={{ height: 53 * emptyRows }}>\n                                    <TableCell colSpan={6} />\n                                </TableRow>\n                            )}\n                        </TableBody>\n                    </Table>\n                </TableContainer>\n                <TablePagination\n                    rowsPerPageOptions={[5, 10, 25]}\n                    component=\"div\"\n                    count={displayed.length}\n                    rowsPerPage={rowsPerPage}\n                    page={page}\n                    onChangePage={handleChangePage}\n                    onChangeRowsPerPage={handleChangeRowsPerPage}\n                />\n            </Paper>\n        </div>\n    )\n}\n","import React, { useState, useEffect, useContext } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport Typography from '@material-ui/core/Typography';\nimport TextField from '@material-ui/core/TextField';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport MuiAlert from '@material-ui/lab/Alert';\nimport WordBankContext from './WordBankContext';\nimport Button from '@material-ui/core/Button';\nimport CardActions from '@material-ui/core/CardActions';\n\nconst useStyles = makeStyles({\n    root: {\n        minWidth: 275,\n    },\n    title: {\n        fontSize: 14,\n    },\n    pos: {\n        marginBottom: 12,\n    },\n    card: {\n        justifyContent: \"space-between\",\n        textAlign: 'center',\n        position: 'absolute',\n        left: '50%',\n        top: '50%',\n        transform: 'translate(-50%, -50%)',\n        padding: '22pt',\n        userSelect: 'none'\n    },\n    highScore: {\n        width: '162pt',\n        textAlign: 'center',\n        margin: '10pt',\n        userSelect: 'none'\n    },\n    score: {\n        width: '162pt',\n        textAlign: 'center',\n        margin: '10pt',\n        right: '0',\n        position: 'absolute',\n        userSelect: 'none'\n    },\n    noWords: {\n        textAlign: 'center',\n        position: 'absolute',\n        left: '50%',\n        top: '50%',\n        transform: 'translate(-50%, -50%)',\n    },\n});\n\nfunction Alert(props) {\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\n}\n\n\nexport default function Practice(props) {\n    const [currWord, setCurrWord] = useState({ \"kanji\": \"\", \"hira\": \"\", \"english\": \"\" });\n    const [open, setOpen] = React.useState(false);\n    const [error, setError] = React.useState(false);\n    const [correctResp, setCorrectResp] = React.useState(\"\");\n    const [response, setResponse] = React.useState(\"\");\n    const [highScore, setHightScore] = React.useState(0);\n    const [score, setScore] = React.useState(0);\n    const [wordList, setWordList] = React.useState([]);\n    const [finished, setFinished] = React.useState(false);\n\n    const context = useContext(WordBankContext);\n    const classes = useStyles();\n\n    useEffect(() => {\n        copyList();\n    }, [])\n\n    const handleClose = (event, reason) => {\n        if (reason === 'clickaway') {\n            return;\n        }\n\n        setOpen(false);\n        setError(false);\n    };\n\n    const copyList = () => {\n        let list = [];\n        for (var i = 0; i < context.state.japanese.length; i++) {\n            list.push(context.state.japanese[i]);\n        }\n\n        setHightScore(context.state.highscore);\n        setWordList(list);\n        getRandomWord(list);\n    }\n\n    const getRandomWord = (list) => {\n        let index = Math.floor(Math.random() * list.length);\n        setCurrWord(list[index]);\n\n        if (list.length > 2) {\n            list.splice(index, 1);\n            setWordList(list);\n        }\n        else if (list.length == 2) {\n            list = [list[list.length - 1 - index]]\n            setWordList(list);\n        }\n        else if (list.length == 1) {\n            list = []\n            setWordList(list);\n        }\n    }\n\n    const checkInput = (event) => {\n        if (event.keyCode == 13) {\n            if (response != \"\") {\n                if ((currWord.kanji != currWord.hira && response == currWord.kanji)\n                    || (currWord.kanji == currWord.hira && response == currWord.english.split(\" \")[0])) {\n                    let s = score + 1\n                    setScore(s);\n                    setOpen(true);\n\n                    if (s > highScore) {\n                        setHightScore(s);\n                        context.setScore(s);\n                    }\n                }\n                else {\n                    setError(true);\n                    if (currWord.kanji == currWord.hira) {\n                        setCorrectResp(currWord.english);\n                    }\n                    else {\n                        setCorrectResp(currWord.hira);\n                    }\n                }\n\n                if (wordList.length > 0) {\n                    getRandomWord(wordList);\n                }\n                else {\n                    setFinished(true);\n                }\n                setResponse(\"\");\n            }\n        }\n    }\n\n    const retry = () => {\n        copyList();\n        setScore(0);\n        setFinished(false);\n    }\n\n    return (\n        <div>\n            <Snackbar open={open} autoHideDuration={2000} onClose={handleClose} anchorOrigin={{ vertical: 'top', horizontal: 'center' }}>\n                <Alert onClose={handleClose} severity=\"success\">\n                    Correct!\n                </Alert>\n            </Snackbar>\n            <Snackbar open={error} autoHideDuration={6000} onClose={handleClose} anchorOrigin={{ vertical: 'top', horizontal: 'center' }}>\n                <Alert onClose={handleClose} severity=\"error\">\n                    Incorrect, correct response: {correctResp}\n                </Alert>\n            </Snackbar>\n            <div style={{ display: 'flex' }}>\n                <Card className={classes.highScore}>\n                    <CardContent>\n                        <Typography variant=\"h5\" component=\"h2\">\n                            HighScore: {highScore}\n                        </Typography>\n                    </CardContent>\n                </Card>\n                <Card className={classes.score}>\n                    <CardContent>\n                        <Typography variant=\"h5\" component=\"h2\">\n                            Score: {score}\n                        </Typography>\n                    </CardContent>\n                </Card>\n            </div>\n            {currWord != null && currWord.kanji != \"\" && !finished ? (\n                <Card className={classes.card}>\n                    <CardContent>\n                        <Typography className={classes.title} color=\"textSecondary\" gutterBottom>\n                            {currWord.kanji != currWord.hira ? (\"Write the kanji bellow\") : (\"Write the meaning in english bellow\")}\n                        </Typography>\n                        {currWord.kanji != currWord.hira ? (\n                            <Typography variant=\"h1\" component=\"h2\">\n                                {currWord.kanji}\n                            </Typography>\n                        ) : (\n                                <Typography variant=\"h2\" component=\"h2\">\n                                    {currWord.kanji}\n                                </Typography>\n                            )}\n                    </CardContent>\n                    <TextField\n                        id=\"outlined-basic\"\n                        label=\"Write answer\"\n                        variant=\"outlined\"\n                        onKeyDown={checkInput}\n                        value={response}\n                        onChange={(e) => { setResponse(e.target.value) }}\n                    />\n                </Card>\n            ) : (\n                    <div>\n                        <h1 className={classes.noWords} style={{ width: '100%' }}>Add words to your word bank to start practicing</h1>\n                    </div>\n                )}\n            { finished ? (\n                <Card className={classes.card}>\n                    <CardContent>\n                        <Typography variant=\"h3\" component=\"h2\">\n                            Practice Complete!\n                        </Typography>\n                    </CardContent>\n                    <CardActions>\n                        <Button\n                            variant=\"contained\"\n                            color=\"primary\"\n                            style={{ marginLeft: 'auto', marginRight: 'auto' }}\n                            onClick={retry}>\n                            Retry\n                        </Button>\n                    </CardActions>\n                </Card>\n            ) : (<span />)}\n        </div>\n    )\n}\n","import { createMuiTheme } from '@material-ui/core/styles';\n\nexport const lightTheme = createMuiTheme({\n    palette: {\n        type: \"light\",\n    }\n})\n\nexport const darkTheme = createMuiTheme({\n    palette: {\n        type: \"dark\",\n        background: {\n            default: \"#424242\"\n        }\n    }\n})","import axios from 'axios';\n\nexport default class DuoAPI {\n    constructor(credentials) {\n        this.username = credentials.username;\n        this.password = credentials.password;\n        this.baseUrl = \"https://www.duolingo.com/\";\n        this.jwt = null;\n    }\n\n    async login() {\n        const result = await axios({\n            url: this.baseUrl + \"login\",\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\"\n            },\n            data: {\n                login: this.username,\n                password: this.password\n            }\n        });\n\n        this.jwt = result.headers.jwt;\n        return result.data;\n    }\n\n    async getLearnedWords_Old() {\n        const result = await axios({\n            url: this.baseUrl + \"users/\" + this.username,\n            method: \"GET\",\n            headers: {\n                \"Authorization\": \"Bearer \" + this.jwt\n            }\n        });\n\n        const data = result.data;\n        let words = [];\n\n        data.language_data[\"ja\"].skills.forEach(topic => {\n            if(topic.learned){\n                words = words.concat(topic['words']);\n            }\n        });\n\n        return words;\n    }\n\n    async getLearnedWords() {\n        const result = await axios({\n            url: this.baseUrl + \"vocabulary/overview\",\n            method: \"GET\",\n            headers: {\n                \"Authorization\": \"Bearer \" + this.jwt\n            }\n        });\n\n        const data = result.data;\n        let words = [];\n\n        data.vocab_overview.forEach(word => {\n            words = words.concat(word.word_string);\n        });\n\n        return words;\n    }\n}","import React, { useContext } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport FormLabel from '@material-ui/core/FormLabel';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormGroup from '@material-ui/core/FormGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Switch from '@material-ui/core/Switch';\nimport { lightTheme, darkTheme } from './themes';\nimport WordBankContext from './WordBankContext';\nimport DuoAPI from '../APIs/DuoAPI'\nimport Divider from '@material-ui/core/Divider';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport MuiAlert from '@material-ui/lab/Alert';\nimport LinearProgress from '@material-ui/core/LinearProgress';\nimport Grid from '@material-ui/core/Grid';\nimport ButtonGroup from '@material-ui/core/ButtonGroup';\nimport ArrowDropDownIcon from '@material-ui/icons/ArrowDropDown';\nimport ClickAwayListener from '@material-ui/core/ClickAwayListener';\nimport Grow from '@material-ui/core/Grow';\nimport Paper from '@material-ui/core/Paper';\nimport Popper from '@material-ui/core/Popper';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport MenuList from '@material-ui/core/MenuList';\n\nconst useStyles = makeStyles({\n    root: {\n        position: 'absolute',\n        left: '50%',\n        top: '50%',\n        transform: 'translate(-50%, -50%)',\n        padding: '10pt',\n        userSelect: 'none'\n    },\n    loading: {\n        position: 'absolute',\n        left: '50%',\n        top: '100%',\n        transform: 'translate(-50%, -100%)',\n    }\n});\n\nfunction Alert(props) {\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\n}\n\nexport default function Settings(props) {\n    const context = useContext(WordBankContext);\n    const [state, setState] = React.useState({\n        dark: context.state.dark\n    });\n    const [username, setUsername] = React.useState(\"\");\n    const [password, setPassword] = React.useState(\"\");\n    const [open, setOpen] = React.useState(false);\n    const [error, setError] = React.useState(false);\n    const [loading, setLoading] = React.useState(false);\n    const [progress, setProgress] = React.useState(0);\n    const [totalWords, setTotalWords] = React.useState(0);\n    const [totalImp, setTotalImp] = React.useState(-1);\n    const [openBtn, setOpenBtn] = React.useState(false);\n    const anchorRef = React.useRef(null);\n    const [selectedIndex, setSelectedIndex] = React.useState(1);\n    const [errorMessage, setErrorMessage] = React.useState(\"Wrong Credentials\");\n    const [successMessage, setSuccessMessage] = React.useState(\"Login Successful\");\n\n    const classes = useStyles();\n    const JishoApi = require('unofficial-jisho-api');\n    const jisho = new JishoApi();\n    const fs = window.require('fs');\n\n    const performLogin = (event) => {\n        if (event.keyCode == 13) {\n            getDuoWords()\n        }\n    }\n\n    const getDuoWords = async () => {\n        const duo = new DuoAPI({ username: username, password: password });\n        setUsername(\"\");\n        setPassword(\"\");\n\n        duo.login().then((response) => {\n            if (!response.hasOwnProperty(\"failure\")) {\n                setSuccessMessage(\"Login Successful\");\n                setOpen(true);\n                setLoading(true);\n                duo.getLearnedWords().then((words) => {\n                    setTotalWords(words.length);\n                    addDuoWords(words);\n                })\n            }\n            else {\n                setErrorMessage(\"Wrong Credentials\");\n                setError(true);\n            }\n        })\n    }\n\n    const addDuoWords = async (list) => {\n        let imported = 0;\n        for (let i = 0; i < list.length; i++) {\n            let word = list[i];\n            if (!context.checkWord(word)) {\n                if (word.length == 1) {\n                    let data = await jisho.searchForKanji(word);\n                    let item = JSON.parse(JSON.stringify(data, null, 2));\n\n                    if (item.found) {\n                        imported++;\n                        let newWord = {\n                            \"kanji\": word,\n                            \"hira\": item.kunyomi[0],\n                            \"english\": item.meaning,\n                            \"jlpt\": item.jlptLevel\n                        }\n\n                        context.addValue(newWord);\n                    }\n                }\n                else {\n                    let data = await jisho.searchForPhrase(word);\n                    let items = JSON.parse(JSON.stringify(data, null, 2));\n\n                    if (items.meta.status == 200 && items.data.length > 0) {\n                        imported++;\n                        let item = items.data[0];\n                        let newWord = {\n                            \"kanji\": word,\n                            \"hira\": item.japanese[0].reading,\n                            \"english\": item.senses[0].english_definitions[0],\n                            \"jlpt\": item.jlpt.length > 0 ? item.jlpt[0].split(\"jlpt-\")[1].toUpperCase() : \"Unknown\"\n                        }\n\n                        context.addValue(newWord);\n                    }\n                }\n            }\n\n            setProgress(i / (list.length - 1) * 100);\n        }\n\n        setSuccessMessage(\"All words were imported\");\n        setTotalImp(imported);\n        setLoading(false);\n    }\n\n    const handleChange = (event) => {\n        setState({ ...state, [event.target.name]: event.target.checked });\n        event.target.checked ? props.theme(darkTheme) : props.theme(lightTheme);\n        context.setTheme(event.target.checked);\n    };\n\n    const handleClose = (event, reason) => {\n        if (reason === 'clickaway') {\n            return;\n        }\n\n        setOpen(false);\n        setError(false);\n    };\n\n    //-----------------------------------------//\n    // Import Export Button functions //\n    //-----------------------------------------//\n\n    const options = ['Import Words', 'Export Words'];\n\n    const handleFile = ({ target }) => {\n        if (target.files.length > 0) {\n            //ISSUE: For now it only works with directories with at least one file\n            if (selectedIndex == 1) {\n                var path = \"\";\n                const arrayPath = target.files[0].path.split(\"\\\\\")\n\n                for (var i = 0; i < arrayPath.length-1; i++) {\n                    path += arrayPath[i] + \"\\\\\";\n                }\n\n                fs.writeFileSync(path + \"word-bank.json\", JSON.stringify(context.state));\n                setSuccessMessage(\"File Exported\");\n                setOpen(true);\n            }\n            else {\n                fs.readFile(target.files[0].path, function (err, data) {\n                    if (err != null) {\n                        console.log(err);\n                        setErrorMessage(\"Could not read File\");\n                        setError(true);\n                    }\n                    else {\n                        let parsedJson = JSON.parse(data);\n                        if (!parsedJson.hasOwnProperty(\"japanese\") || !parsedJson.hasOwnProperty(\"highscore\") || !parsedJson.hasOwnProperty(\"dark\")) {\n                            setErrorMessage(\"Invalid JSON\");\n                            setError(true);\n                        }\n                        else {\n                            context.upload(parsedJson);\n                            fs.writeFileSync('word-bank.json', JSON.stringify(parsedJson));\n                            setSuccessMessage(\"File Imported\");\n                            setOpen(true);\n                        }\n                    }\n                });\n            }\n        }\n    };\n\n    const handleMenuItemClick = (event, index) => {\n        setSelectedIndex(index);\n        setOpenBtn(false);\n    };\n\n    const handleToggleBtn = () => {\n        setOpenBtn((prevOpen) => !prevOpen);\n    };\n\n    const handleCloseBtn = (event) => {\n        if (anchorRef.current && anchorRef.current.contains(event.target)) {\n            return;\n        }\n\n        setOpenBtn(false);\n    };\n\n    return (\n        <div>\n            <Snackbar open={open} autoHideDuration={4000} onClose={handleClose} anchorOrigin={{ vertical: 'top', horizontal: 'center' }}>\n                <Alert onClose={handleClose} severity=\"success\">\n                    {successMessage}\n                </Alert>\n            </Snackbar>\n            <Snackbar open={error} autoHideDuration={4000} onClose={handleClose} anchorOrigin={{ vertical: 'top', horizontal: 'center' }}>\n                <Alert onClose={handleClose} severity=\"error\">\n                    {errorMessage}\n                </Alert>\n            </Snackbar>\n            <div className={classes.root}>\n                <FormControl component=\"fieldset\">\n                    <FormLabel component=\"legend\">Personalization options</FormLabel>\n                    <FormGroup>\n                        <FormControlLabel\n                            control={<Switch checked={state.dark} onChange={handleChange} name=\"dark\" color=\"primary\" />}\n                            label=\"Dark Mode\"\n                        />\n                    </FormGroup>\n                </FormControl>\n                <Divider style={{ marginTop: '10pt', marginBottom: '10pt' }} />\n                <FormLabel component=\"legend\">Get Duolingo word bank</FormLabel>\n                <form className={classes.form} noValidate>\n                    <TextField\n                        variant=\"outlined\"\n                        margin=\"normal\"\n                        required\n                        fullWidth\n                        id=\"email\"\n                        label=\"Username\"\n                        name=\"username\"\n                        autoComplete=\"username\"\n                        autoFocus\n                        value={username}\n                        onChange={(e) => { setUsername(e.target.value) }}\n                    />\n                    <TextField\n                        variant=\"outlined\"\n                        margin=\"normal\"\n                        required\n                        fullWidth\n                        name=\"password\"\n                        label=\"Password\"\n                        type=\"password\"\n                        id=\"password\"\n                        autoComplete=\"current-password\"\n                        value={password}\n                        onChange={(e) => { setPassword(e.target.value) }}\n                        onKeyDown={performLogin}\n                    />\n                    <Button\n                        fullWidth\n                        variant=\"contained\"\n                        color=\"primary\"\n                        onClick={getDuoWords}\n                    >\n                        Log In\n                    </Button>\n                </form>\n                {loading ? (\n                    <div style={{ marginTop: '12pt' }}>\n                        <FormLabel component=\"legend\">Found {totalWords} words</FormLabel>\n                        <LinearProgress variant=\"determinate\" value={progress} style={{ marginTop: '10pt' }} />\n                    </div>\n                ) : (<span />)\n                }\n                {totalImp != -1 ? (<FormLabel component=\"legend\" style={{ marginTop: '12pt' }}>Imported {totalImp} words</FormLabel>) : (<span />)}\n                <Divider style={{ marginTop: '10pt', marginBottom: '10pt' }} />\n                <FormLabel component=\"legend\">Import / Export Words</FormLabel>\n                <input type=\"file\"\n                    id=\"fileUploadButton\"\n                    hidden\n                    accept=\"application/JSON\"\n                    onChange={handleFile}\n                />\n                <input type=\"file\"\n                    id=\"fileSaveButton\"\n                    webkitdirectory=\"\"\n                    hidden\n                    onChange={handleFile}\n                />\n                <Grid container direction=\"column\" style={{ marginTop: '10pt' }}>\n                    <Grid item xs={12}>\n                        <label htmlFor={selectedIndex == 1 ? 'fileSaveButton' : 'fileUploadButton'}>\n                            <ButtonGroup variant=\"contained\" color=\"primary\" ref={anchorRef} aria-label=\"split button\">\n                                <Button component=\"span\">{options[selectedIndex]}</Button>\n                                <Button\n                                    color=\"primary\"\n                                    size=\"small\"\n                                    aria-controls={openBtn ? 'split-button-menu' : undefined}\n                                    aria-expanded={openBtn ? 'true' : undefined}\n                                    aria-label=\"select merge strategy\"\n                                    aria-haspopup=\"menu\"\n                                    onClick={handleToggleBtn}\n                                >\n                                    <ArrowDropDownIcon />\n                                </Button>\n                            </ButtonGroup>\n                        </label>\n                        <Popper\n                            open={openBtn}\n                            anchorEl={anchorRef.current}\n                            role={undefined}\n                            transition\n                            disablePortal\n                            modifiers={{\n                                offset: {\n                                    enabled: true,\n                                    offset: '-20, 0'\n                                }\n                            }}>\n                            {({ TransitionProps, placement }) => (\n                                <Grow\n                                    {...TransitionProps}\n                                    style={{\n                                        transformOrigin: 'center top',\n                                        transform: 'translate3d(20px, 400px, 0px), !important'\n                                    }}\n                                >\n                                    <Paper>\n                                        <ClickAwayListener onClickAway={handleCloseBtn}>\n                                            <MenuList id=\"split-button-menu\">\n                                                {options.map((option, index) => (\n                                                    <MenuItem\n                                                        key={option}\n                                                        disabled={index === 2}\n                                                        selected={index === selectedIndex}\n                                                        onClick={(event) => handleMenuItemClick(event, index)}\n                                                    >\n                                                        {option}\n                                                    </MenuItem>\n                                                ))}\n                                            </MenuList>\n                                        </ClickAwayListener>\n                                    </Paper>\n                                </Grow>\n                            )}\n                        </Popper>\n                    </Grid>\n                </Grid>\n            </div>\n        </div>\n    )\n}\n","import React, { useEffect, useContext } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Typography from '@material-ui/core/Typography';\nimport WordBankContext from './WordBankContext';\nimport Button from '@material-ui/core/Button';\nimport Flippy, { FrontSide, BackSide } from 'react-flippy';\nimport { useHistory } from 'react-router-dom';\nimport IconButton from '@material-ui/core/IconButton';\nimport CancelIcon from '@material-ui/icons/Cancel';\nimport CheckCircleIcon from '@material-ui/icons/CheckCircle';\nimport Tooltip from '@material-ui/core/Tooltip';\n\nexport default function FlashCards(props) {\n    const [currWord, setCurrWord] = React.useState({ \"kanji\": \"\", \"hira\": \"\", \"english\": \"\" });\n    const [reload, setReload] = React.useState(true);\n    const [flip, setFlip] = React.useState(false);\n\n    const classes = useStyles();\n    const context = useContext(WordBankContext);\n    const history = useHistory();\n\n    useEffect(() => {\n        setReload(false);\n        if (context.state.japanese.length > 0 && currWord.kanji == \"\") {\n            getRandomWord();\n        }\n\n        window.addEventListener('keydown', manageKeyPress);\n\n        //remove listener\n        return () => {\n            window.removeEventListener('keydown', manageKeyPress);\n        };\n    }, [reload])\n\n    const getRandomWord = () => {\n        let list = context.state.japanese;\n\n        if (Math.random() > 0.7 && context.state.wrong.length > 0) {\n            list = context.state.wrong;\n        }\n\n        let index = Math.floor(Math.random() * list.length);\n        setCurrWord(list[index]);\n\n        return list[index];\n    }\n\n    const makeUrl = (name) => {\n        if (name.length == 1) {\n            return \"/kanjiDefinition/\" + name\n        }\n        else {\n            return \"/definition/\" + name\n        }\n    }\n\n    const wrongWord = () => {\n        setFlip(false);\n\n        if (!context.checkWrong(currWord.kanji)) {\n            context.addWrong(currWord);\n        }\n\n        getRandomWord();\n        setReload(true);\n    }\n\n    const rightWord = () => {\n        setFlip(false);\n\n        if (context.checkWrong(currWord.kanji)) {\n            context.removeWrong(currWord.kanji);\n        }\n\n        getRandomWord();\n        // reload event listener\n        setReload(true);\n    }\n\n    const manageKeyPress = (event) => {\n        switch (event.keyCode) {\n            // space bar\n            case 32:\n                setFlip(prevState => !prevState);\n                break;\n            // left arrow\n            case 37:\n                wrongWord();\n                break;\n            // right arrow\n            case 39:\n                rightWord()\n                break;\n            default:\n                break;\n        }\n    }\n\n    const buttons = () => {\n        return (\n            <div>\n                <Tooltip title=\"<- arrow key\" placement=\"top\">\n                    <IconButton style={{ position: 'absolute', bottom: '0', left: '5%', color: '#e91e63' }} onClick={() => wrongWord()}>\n                        <CancelIcon style={{ width: 60, height: 60 }} />\n                    </IconButton>\n                </Tooltip>\n                <Tooltip title=\"space bar\" placement=\"top\">\n                    <Button variant=\"contained\" color=\"primary\" onClick={() => { setFlip(true); }} style={{ marginTop: '46pt' }}>\n                        Check Meaning\n                </Button>\n                </Tooltip>\n                <Tooltip title=\"-> arrow key\" placement=\"top\">\n                    <IconButton style={{ position: 'absolute', bottom: '0', right: '5%', color: '#4caf50' }} onClick={() => rightWord()}>\n                        <CheckCircleIcon style={{ width: 60, height: 60 }} />\n                    </IconButton>\n                </Tooltip>\n            </div>\n        );\n    }\n\n    return (\n        <div>\n            {currWord != null && currWord.kanji != \"\" ? (\n                <div>\n                    <Flippy\n                        flipOnHover={false}\n                        flipOnClick={false}\n                        isFlipped={flip}\n                        flipDirection=\"horizontal\"\n                        style={{\n                            justifyContent: \"space-between\",\n                            textAlign: 'center',\n                            position: 'absolute',\n                            left: '50%',\n                            top: '50%',\n                            transform: 'translate(-50%, -50%)',\n                            padding: '22pt',\n                            userSelect: 'none',\n                            width: '500pt',\n                            height: '300pt'\n                        }}\n                    >\n                        {currWord.kanji.length < 8 ? (\n                            <FrontSide style={{ fontSize: '50pt', padding: '0', paddingTop: '90pt' }}>\n                                {currWord.kanji}\n                                {buttons()}\n                            </FrontSide>\n                        ) : (\n                                <FrontSide style={{ fontSize: '40pt', padding: '0', paddingTop: '90pt' }}>\n                                    {currWord.kanji}\n                                    {buttons()}\n                                </FrontSide>\n                            )}\n                        <BackSide style={{ fontSize: '50pt', padding: '0', paddingTop: '50pt' }}>\n                            {<Typography variant=\"h3\" component=\"h2\">\n                                {currWord.hira}\n                            </Typography>}\n                            <Typography variant=\"h3\" component=\"h2\" style={{ marginTop: '20pt' }}>\n                                {currWord.english}\n                            </Typography>\n                            <Button variant=\"contained\" color=\"primary\" onClick={() => { history.push(makeUrl(currWord.kanji)); }}>\n                                Check Definition\n                            </Button>\n                            <Tooltip title=\"space bar\" placement=\"top\">\n                                <Button variant=\"contained\" color=\"secondary\" onClick={() => { setFlip(false); }} style={{ marginLeft: '10pt' }}>\n                                    Go Back\n                                </Button>\n                            </Tooltip>\n                        </BackSide>\n                    </Flippy>\n                </div>\n            ) : (\n                    <div>\n                        <h1 className={classes.noWords} style={{ width: '100%' }}>Add words to your word bank to start practicing</h1>\n                    </div>\n                )}\n        </div>\n    )\n}\n\nconst useStyles = makeStyles((theme) => ({\n    noWords: {\n        textAlign: 'center',\n        position: 'absolute',\n        left: '50%',\n        top: '50%',\n        transform: 'translate(-50%, -50%)',\n    },\n}));\n","import React, { Component } from 'react'\nimport {Switch, Route} from 'react-router-dom';\nimport InteractiveList from './InteractiveList';\nimport KanjiDefinitionScreen from './KanjiDefinitionScreen';\nimport DefinitionScreen from './DefinitionScreen';\nimport WordBank from './WordBank';\nimport Practice from './Practice';\nimport Settings from './Settings';\nimport FlashCards from './FlashCards';\n\nexport class JapaneseScreen extends Component {\n    render() {\n        return (\n            <div>\n                <Switch>\n                    <Route path=\"/\" exact render={(props) => (\n                        <InteractiveList {...props} itemToSearch={this.props.itemToSearch} loadingAnimation={this.props.loadingAnimation} />\n                    )}/>\n                    <Route path=\"/kanjiDefinition/:name\" component={KanjiDefinitionScreen}/>\n                    <Route path=\"/Definition/:name\" component={DefinitionScreen}/>\n                    <Route exact path=\"/wordBank\" component={WordBank}/>\n                    <Route exact path=\"/practice\" component={Practice}/>\n                    <Route exact path=\"/flashcards\" component={FlashCards}/>\n                    <Route exact path=\"/settings\" render={(props) => (\n                        <Settings {...props} theme={this.props.theme} />\n                    )}/>\n                </Switch>\n            </div>\n        )\n    }\n}\n\nexport default JapaneseScreen\n","import React, { useEffect } from 'react';\nimport SearchAppBar from './components/SearchAppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport JapaneseScreen from './components/JapaneseScreen';\nimport { ThemeProvider } from '@material-ui/core/styles';\nimport { lightTheme, darkTheme } from './components/themes';\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport WordBankContext from './components/WordBankContext';\n\n\n\nexport default function App(props) {\n\tconst [searchValue, setSearchValue] = React.useState(null);\n\tconst [currTheme, setCurrTheme] = React.useState(lightTheme);\n\tconst [loading, setLoading] = React.useState(null);\n\tconst [words, setWords] = React.useState({ \"japanese\": [], \"highscore\": 0, \"dark\": false, \"wrong\": [] });\n\n\tconst fs = window.require('fs');\n\n\tuseEffect(() => {\n\t\treadFile();\n\t}, [])\n\n\tconst readFile = () => {\n\t\tfs.readFile('word-bank.json', function (err, data) {\n\t\t\tif (err != null) {\n\t\t\t\tconsole.log(err);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tlet parsedJson = JSON.parse(data);\n\n\t\t\t\tif (parsedJson.hasOwnProperty(\"japanese\")) words.japanese = parsedJson.japanese;\n\t\t\t\tif (parsedJson.hasOwnProperty(\"highscore\")) words.highscore = parsedJson.highscore;\n\t\t\t\tif (parsedJson.hasOwnProperty(\"dark\")) words.dark = parsedJson.dark;\n\t\t\t\tif (parsedJson.hasOwnProperty(\"wrong\")) words.wrong = parsedJson.wrong;\n\n\t\t\t\tif (parsedJson.dark) {\n\t\t\t\t\tsetCurrTheme(darkTheme);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n\n\tconst addWord = (word) => {\n\t\twords.japanese.unshift(word);\n\t\tfs.writeFileSync('word-bank.json', JSON.stringify(words));\n\t\tsetWords(words);\n\t}\n\n\tconst addWrongWord = (word) => {\n\t\twords.wrong.unshift(word);\n\t\tfs.writeFileSync('word-bank.json', JSON.stringify(words));\n\t\tsetWords(words);\n\t}\n\n\tconst removeWord = (kanji) => {\n\t\tlet wordsCopy = words.japanese;\n\t\tlet index = wordsCopy.map(e => e.kanji).indexOf(kanji)\n\t\tif (index != -1) {\n\t\t\twords.japanese.splice(index, 1);\n\t\t\tfs.writeFileSync('word-bank.json', JSON.stringify(words));\n\t\t\tsetWords(words);\n\t\t}\n\t}\n\n\tconst removeWrongWord = (kanji) => {\n\t\tlet wordsCopy = words.wrong;\n\t\tlet index = wordsCopy.map(e => e.kanji).indexOf(kanji)\n\t\tif (index != -1) {\n\t\t\twords.wrong.splice(index, 1);\n\t\t\tfs.writeFileSync('word-bank.json', JSON.stringify(words));\n\t\t\tsetWords(words);\n\t\t}\n\t}\n\n\tconst setHighScore = (value) => {\n\t\twords.highscore = value;\n\t\tfs.writeFileSync('word-bank.json', JSON.stringify(words));\n\t\tsetWords(words);\n\t}\n\n\tconst setTheme = (bool) => {\n\t\twords.dark = bool;\n\t\tfs.writeFileSync('word-bank.json', JSON.stringify(words));\n\t\tsetWords(words);\n\t}\n\n\tconst checkWordBank = (kanji) => {\n\t\tif (words.japanese.filter(el => kanji == el.kanji).length > 0) {\n\t\t\treturn true;\n\t\t}\n\n\t\treturn false;\n\t}\n\n\tconst checkWrongWords = (kanji) => {\n\t\tif (words.wrong.filter(el => kanji == el.kanji).length > 0) {\n\t\t\treturn true;\n\t\t}\n\n\t\treturn false;\n\t}\n\n\tconst importWords = (newWords) => {\n\t\twords.japanese = newWords.japanese;\n\t\twords.highscore = newWords.highscore;\n\t\twords.dark = newWords.dark;\n\t}\n\n\treturn (\n\t\t<WordBankContext.Provider\n\t\t\tvalue={\n\t\t\t\t{\n\t\t\t\t\tstate: words,\n\t\t\t\t\taddValue: addWord,\n\t\t\t\t\taddWrong: addWrongWord,\n\t\t\t\t\tremoveValue: removeWord,\n\t\t\t\t\tremoveWrong: removeWrongWord,\n\t\t\t\t\tsetScore: setHighScore,\n\t\t\t\t\tsetTheme: setTheme,\n\t\t\t\t\tcheckWord: checkWordBank,\n\t\t\t\t\tcheckWrong: checkWrongWords,\n\t\t\t\t\tupload: importWords\n\t\t\t\t}\n\t\t\t}>\n\t\t\t<ThemeProvider theme={currTheme}>\n\t\t\t\t<CssBaseline />\n\t\t\t\t<div className=\"App\">\n\t\t\t\t\t<SearchAppBar SearchData={setSearchValue} loading={setLoading} />\n\t\t\t\t\t<Toolbar />\n\t\t\t\t\t<JapaneseScreen itemToSearch={searchValue} theme={setCurrTheme} loadingAnimation={loading} />\n\t\t\t\t</div>\n\t\t\t</ThemeProvider>\n\t\t</WordBankContext.Provider>\n\t);\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { HashRouter } from 'react-router-dom';\n\nReactDOM.render(\n  <HashRouter>\n    <App />\n  </HashRouter>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}